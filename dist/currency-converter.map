{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/index.ts","webpack:///./src/types/options.ts","webpack:///./src/utils/dom.ts","webpack:///./src/style/index.scss?9f1d"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;;;;AClFa;AACb,8CAA8C,cAAc;AAC5D,kBAAkB,mBAAO,CAAC,CAAiB;AAC3C,cAAc,mBAAO,CAAC,CAAa;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,2CAA2C,uBAAuB;AAClE;AACA,8DAA8D;AAC9D;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wHAAwH,oBAAoB;AAC5I;AACA;AACA,oIAAoI,4BAA4B;AAChK,sIAAsI,8BAA8B;AACpK;AACA;AACA;AACA;AACA;AACA,8HAA8H,0BAA0B;AACxJ,gIAAgI,4BAA4B;AAC5J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,gBAAgB,iBAAiB;AAC3F;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC9Ya;AACb,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;;;;;;;ACXa;AACb,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACpCA,uC","file":"currency-converter.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst options_1 = require(\"./types/options\");\r\nconst dom_1 = require(\"./utils/dom\");\r\nfunction CurrencyConverterInstance(element, instanceConfig) {\r\n    const self = {\r\n        _bind: bind,\r\n        _createElement: dom_1.createElement,\r\n        _data: {\r\n            from: {\r\n                amount: null,\r\n                currency: null\r\n            },\r\n            to: {\r\n                amount: null,\r\n                currency: null\r\n            }\r\n        },\r\n        destroy: destroy,\r\n        getData: getData,\r\n        setAmount: seAmount,\r\n        setCurrency: setCurrency,\r\n        updateCurrencyData: updateCurrencyData\r\n    };\r\n    self._handlers = [];\r\n    let _currencyData = {};\r\n    let _wrapperElm = null;\r\n    let _currencyTextElm = null;\r\n    function init() {\r\n        var _a;\r\n        self.element = element;\r\n        self.config = parseConfig();\r\n        self._data.from.currency = self.config.fromCurrency;\r\n        self._data.to.currency = self.config.toCurrency;\r\n        buildOut();\r\n        if ((_a = self === null || self === void 0 ? void 0 : self.config) === null || _a === void 0 ? void 0 : _a.currencyData) {\r\n            parseAndLoadCurrencyData(self.config.currencyData);\r\n        }\r\n        else {\r\n            fetchCurrencyData().then((data) => {\r\n                parseAndLoadCurrencyData(data);\r\n            });\r\n        }\r\n        bindEvents();\r\n        triggerEvent(\"onReady\");\r\n    }\r\n    function parseConfig() {\r\n        const userConfig = Object.assign({}, (instanceConfig || {}));\r\n        if ('locale' in userConfig) {\r\n            userConfig.locale = Object.assign(Object.assign({}, options_1.defaults.locale), userConfig.locale);\r\n        }\r\n        if ('precision' in userConfig && isNaN(userConfig.precision)) {\r\n            delete userConfig.precision;\r\n        }\r\n        return Object.assign(Object.assign({}, options_1.defaults), (userConfig));\r\n    }\r\n    function getLocale(key) {\r\n        var _a;\r\n        if (((_a = self === null || self === void 0 ? void 0 : self.config) === null || _a === void 0 ? void 0 : _a.locale) && key in self.config.locale) {\r\n            return self.config.locale[key];\r\n        }\r\n        return key;\r\n    }\r\n    function buildOut() {\r\n        const config = self.config;\r\n        _wrapperElm = dom_1.createElement('div', ('currency-converter' + (typeof config.wrapperClass === 'string' ? ` ${config.wrapperClass}` : '')));\r\n        const fromGroup = dom_1.createElement('div', 'from-group');\r\n        const fromLabel = dom_1.createElement('label', '', getLocale('From'));\r\n        const fromAmountElm = dom_1.createNumberInput(('input-from-amount' + (typeof config.inputFromAmountClass === 'string' ? ` ${config.inputFromAmountClass}` : '')));\r\n        const fromCurrencyElm = dom_1.createSelect(('select-from-currency' + (typeof config.inputFromCurrencyClass === 'string' ? ` ${config.inputFromCurrencyClass}` : '')));\r\n        fromGroup.appendChild(fromLabel);\r\n        fromGroup.appendChild(fromAmountElm);\r\n        fromGroup.appendChild(fromCurrencyElm);\r\n        const toGroup = dom_1.createElement('div', 'to-group');\r\n        const toLabel = dom_1.createElement('label', '', getLocale('To'));\r\n        const toAmountElm = dom_1.createNumberInput(('input-to-amount' + (typeof config.inputToAmountClass === 'string' ? ` ${config.inputToAmountClass}` : '')));\r\n        const toCurrencyElm = dom_1.createSelect(('select-to-currency' + (typeof config.inputToCurrencyClass === 'string' ? ` ${config.inputToCurrencyClass}` : '')));\r\n        toGroup.appendChild(toLabel);\r\n        toGroup.appendChild(toAmountElm);\r\n        toGroup.appendChild(toCurrencyElm);\r\n        const containerElm = dom_1.createElement('div', 'currency-converter-container');\r\n        containerElm.appendChild(fromGroup);\r\n        containerElm.appendChild(toGroup);\r\n        _wrapperElm.appendChild(containerElm);\r\n        if (config.withText) {\r\n            _currencyTextElm = dom_1.createElement('div', 'currency-text');\r\n            _wrapperElm.appendChild(_currencyTextElm);\r\n        }\r\n        self.element.appendChild(_wrapperElm);\r\n        self._elms = {\r\n            fromAmount: fromAmountElm.getElementsByTagName(\"input\")[0],\r\n            fromCurrency: fromCurrencyElm.getElementsByTagName(\"select\")[0],\r\n            toAmount: toAmountElm.getElementsByTagName(\"input\")[0],\r\n            toCurrency: toCurrencyElm.getElementsByTagName(\"select\")[0],\r\n        };\r\n        self._elms.fromAmount.value = !isNaN(config.baseAmount) ? config.baseAmount.toString() : '1';\r\n    }\r\n    function fetchCurrencyData() {\r\n        return new Promise((resolve) => {\r\n            fetch(self.config.currencyApi).then(results => {\r\n                return results.json();\r\n            }).then(data => {\r\n                resolve(data);\r\n            }).catch(reason => {\r\n                console.error(reason);\r\n            });\r\n        });\r\n    }\r\n    function parseAndLoadCurrencyData(data) {\r\n        parseCurrencyData(data);\r\n        loadCurrencyData();\r\n    }\r\n    function parseCurrencyData(data) {\r\n        if ((data === null || data === void 0 ? void 0 : data.rates) && (data === null || data === void 0 ? void 0 : data.base)) {\r\n            _currencyData = Object.assign(Object.assign({}, data.rates), { [data.base]: 1 });\r\n        }\r\n        else if (data === null || data === void 0 ? void 0 : data.rates) {\r\n            _currencyData = Object.assign({}, data.rates);\r\n        }\r\n        else {\r\n            _currencyData = data;\r\n        }\r\n    }\r\n    function loadCurrencyData() {\r\n        if (!_currencyData) {\r\n            return;\r\n        }\r\n        const elms = self._elms;\r\n        if (!elms || !elms.fromCurrency || !elms.toCurrency) {\r\n            return;\r\n        }\r\n        elms.fromCurrency.innerHTML = '';\r\n        elms.toCurrency.innerHTML = '';\r\n        const currencyArr = Object.keys(_currencyData).sort();\r\n        let currency;\r\n        for (currency of currencyArr) {\r\n            const optionElm = dom_1.createElement('option', '', getLocale(currency));\r\n            optionElm.setAttribute('value', currency);\r\n            elms.fromCurrency.appendChild(optionElm);\r\n            elms.toCurrency.appendChild(optionElm.cloneNode(true));\r\n        }\r\n        const data = self._data;\r\n        if (data.from.currency && data.from.currency in _currencyData) {\r\n            elms.fromCurrency.value = data.from.currency;\r\n        }\r\n        else {\r\n            if (currencyArr.length) {\r\n                elms.fromCurrency.value = currencyArr[0];\r\n            }\r\n            else {\r\n                elms.fromCurrency.value = '';\r\n            }\r\n        }\r\n        if (data.to.currency && data.to.currency in _currencyData) {\r\n            elms.toCurrency.value = data.to.currency;\r\n        }\r\n        else {\r\n            if (currencyArr.length) {\r\n                elms.toCurrency.value = currencyArr[0];\r\n            }\r\n            else {\r\n                elms.toCurrency.value = '';\r\n            }\r\n        }\r\n        onCurrencyChange();\r\n    }\r\n    function round(value, precision) {\r\n        const multiplier = Math.pow(10, precision || 0);\r\n        return Math.round(value * multiplier) / multiplier;\r\n    }\r\n    function convertFrom(bNoTrigger) {\r\n        const elms = self._elms || null;\r\n        if (elms && elms.fromAmount && elms.fromCurrency && elms.toAmount && elms.toCurrency) {\r\n            const data = {\r\n                from: {\r\n                    amount: elms.fromAmount.value,\r\n                    currency: elms.fromCurrency.value\r\n                },\r\n                to: {\r\n                    amount: null,\r\n                    currency: elms.toCurrency.value\r\n                }\r\n            };\r\n            if (!isNaN(data.from.amount)) {\r\n                if (data.from.currency in _currencyData && data.to.currency in _currencyData) {\r\n                    const fromRate = parseFloat(_currencyData[data.from.currency].toString());\r\n                    const toRate = parseFloat(_currencyData[data.to.currency].toString());\r\n                    if (fromRate && toRate) {\r\n                        const fromAMount = parseFloat(data.from.amount);\r\n                        data.to.amount = round(fromAMount * (toRate / fromRate), self.config.precision);\r\n                    }\r\n                }\r\n            }\r\n            elms.toAmount.value = !isNaN(data.to.amount) ? data.to.amount : '';\r\n            setData(data, bNoTrigger);\r\n        }\r\n    }\r\n    function convertTo(bNoTrigger) {\r\n        const elms = self._elms || null;\r\n        if (elms && elms.fromAmount && elms.fromCurrency && elms.toAmount && elms.toCurrency) {\r\n            const data = {\r\n                from: {\r\n                    amount: null,\r\n                    currency: elms.fromCurrency.value\r\n                },\r\n                to: {\r\n                    amount: elms.toAmount.value,\r\n                    currency: elms.toCurrency.value\r\n                }\r\n            };\r\n            if (!isNaN(data.to.amount)) {\r\n                if (data.from.currency in _currencyData && data.to.currency in _currencyData) {\r\n                    const fromRate = parseFloat(_currencyData[data.from.currency].toString());\r\n                    const toRate = parseFloat(_currencyData[data.to.currency].toString());\r\n                    if (fromRate && toRate) {\r\n                        const toAmount = parseFloat(data.to.amount);\r\n                        data.from.amount = round(toAmount * (fromRate / toRate), self.config.precision);\r\n                    }\r\n                }\r\n            }\r\n            elms.fromAmount.value = !isNaN(data.from.amount) ? data.from.amount : '';\r\n            setData(data, bNoTrigger);\r\n        }\r\n    }\r\n    function setData(data, bNoTrigger) {\r\n        var _a;\r\n        self._data = data;\r\n        if (!bNoTrigger) {\r\n            if (typeof ((_a = self === null || self === void 0 ? void 0 : self.config) === null || _a === void 0 ? void 0 : _a.onChange) === 'function') {\r\n                self.config.onChange(data);\r\n            }\r\n            triggerEvent('onChange', data);\r\n        }\r\n    }\r\n    function getData() {\r\n        return self._data;\r\n    }\r\n    function inputFilter(value) {\r\n        return /^-?\\d*[.,]?\\d*$/.test(value);\r\n    }\r\n    function onInputEvent(event) {\r\n        const target = event.target;\r\n        if (inputFilter(target.value)) {\r\n            target.oldValue = target.value;\r\n            target.oldSelectionStart = target.selectionStart;\r\n            target.oldSelectionEnd = target.selectionEnd;\r\n        }\r\n        else if (target.hasOwnProperty(\"oldValue\")) {\r\n            target.value = target.oldValue || '';\r\n            target.setSelectionRange(target.oldSelectionStart || 0, target.oldSelectionEnd || 0);\r\n        }\r\n        else {\r\n            target.value = \"\";\r\n        }\r\n    }\r\n    function onCurrencyChange() {\r\n        convertFrom();\r\n        showCurrencyText();\r\n    }\r\n    function showCurrencyText() {\r\n        var _a, _b;\r\n        if (self.config.withText && _currencyTextElm && self._data && _currencyData) {\r\n            const data = self._data;\r\n            if (((_a = data === null || data === void 0 ? void 0 : data.from) === null || _a === void 0 ? void 0 : _a.currency) && ((_b = data === null || data === void 0 ? void 0 : data.to) === null || _b === void 0 ? void 0 : _b.currency) && data.from.currency in _currencyData && data.to.currency in _currencyData) {\r\n                _currencyTextElm.innerHTML = '';\r\n                const fromRate = parseFloat(_currencyData[data.from.currency].toString());\r\n                const toRate = parseFloat(_currencyData[data.to.currency].toString());\r\n                const rate = round(toRate / fromRate, self.config.precision);\r\n                const fromCurrency = getLocale(data.from.currency);\r\n                const toCurrency = getLocale(data.to.currency);\r\n                _currencyTextElm.appendChild(dom_1.createElement('span', 'from-amount-text', '1'));\r\n                _currencyTextElm.appendChild(document.createTextNode(' '));\r\n                _currencyTextElm.appendChild(dom_1.createElement('span', 'from-currency-text', fromCurrency));\r\n                _currencyTextElm.appendChild(document.createTextNode(' = '));\r\n                _currencyTextElm.appendChild(dom_1.createElement('span', 'to-amount-text', rate.toString()));\r\n                _currencyTextElm.appendChild(document.createTextNode(' '));\r\n                _currencyTextElm.appendChild(dom_1.createElement('span', 'to-currency-text', toCurrency));\r\n            }\r\n        }\r\n    }\r\n    function bind(element, event, handler, options) {\r\n        if (event instanceof Array)\r\n            return event.forEach((ev) => bind(element, ev, handler, options));\r\n        if (element instanceof Array)\r\n            return element.forEach((el) => bind(el, event, handler, options));\r\n        element.addEventListener(event, handler, options);\r\n        self._handlers.push({\r\n            element: element,\r\n            event,\r\n            handler,\r\n            options,\r\n        });\r\n    }\r\n    function bindEvents() {\r\n        const elms = self._elms;\r\n        if (elms && elms.fromAmount && elms.fromCurrency && elms.toAmount && elms.toCurrency) {\r\n            bind(elms.fromAmount, [\"input\", \"keydown\", \"keyup\", \"mousedown\", \"mouseup\", \"select\", \"contextmenu\", \"drop\"], onInputEvent);\r\n            bind(elms.fromAmount, [\"change\", \"keyup\"], () => convertFrom());\r\n            bind(elms.fromCurrency, \"change\", () => onCurrencyChange());\r\n            bind(elms.toAmount, [\"input\", \"keydown\", \"keyup\", \"mousedown\", \"mouseup\", \"select\", \"contextmenu\", \"drop\"], onInputEvent);\r\n            bind(elms.toAmount, [\"change\", \"keyup\"], () => convertTo());\r\n            bind(elms.toCurrency, \"change\", () => onCurrencyChange());\r\n        }\r\n    }\r\n    function triggerEvent(event, data) {\r\n        const e = data ? new CustomEvent(event, data) : new CustomEvent(event);\r\n        e.initEvent(name, true, true);\r\n        self.element.dispatchEvent(e);\r\n    }\r\n    function destroy() {\r\n        if (self.config !== undefined)\r\n            triggerEvent(\"onDestroy\");\r\n        for (let i = self._handlers.length; i--;) {\r\n            const h = self._handlers[i];\r\n            h.element.removeEventListener(h.event, h.handler, h.options);\r\n        }\r\n        self._handlers = [];\r\n        if (_wrapperElm) {\r\n            _wrapperElm.remove();\r\n        }\r\n    }\r\n    function updateCurrencyData(data) {\r\n        parseAndLoadCurrencyData(data);\r\n    }\r\n    function seAmount(amount) {\r\n        var _a;\r\n        if ((_a = self === null || self === void 0 ? void 0 : self._elms) === null || _a === void 0 ? void 0 : _a.fromAmount) {\r\n            const input = amount.toString();\r\n            if (inputFilter(input)) {\r\n                self._elms.fromAmount.value = input;\r\n                convertFrom();\r\n            }\r\n        }\r\n    }\r\n    function setCurrency(currency) {\r\n        var _a;\r\n        if ((_a = self === null || self === void 0 ? void 0 : self._elms) === null || _a === void 0 ? void 0 : _a.fromAmount) {\r\n            if (currency in _currencyData) {\r\n                self._elms.fromCurrency.value = currency;\r\n                onCurrencyChange();\r\n            }\r\n        }\r\n    }\r\n    init();\r\n    return self;\r\n}\r\nfunction _currencyConverter(nodeList, config) {\r\n    const nodes = Array.prototype.slice\r\n        .call(nodeList)\r\n        .filter((x) => x instanceof HTMLElement);\r\n    let instances = [];\r\n    for (let i = 0; i < nodes.length; i++) {\r\n        const node = nodes[i];\r\n        try {\r\n            if (node.getAttribute(\"data-cc-omit\") !== null)\r\n                continue;\r\n            if ([\"input\", \"select\", \"textarea\", \"button\", \"label\",\r\n                \"fieldset\", \"legend\", \"datalist\", \"output\", \"option\", \"optgroup\"].indexOf(node.tagName.toLowerCase()) > -1) {\r\n                console.error(\"Invalid element\", node);\r\n                continue;\r\n            }\r\n            if (node._currencyConverter !== undefined) {\r\n                node._currencyConverter.destroy();\r\n                node._currencyConverter = undefined;\r\n            }\r\n            node._currencyConverter = CurrencyConverterInstance(node, config || {});\r\n            instances.push(node._currencyConverter);\r\n        }\r\n        catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n    return instances.length === 1 ? instances[0] : instances;\r\n}\r\nif (typeof HTMLElement !== \"undefined\" &&\r\n    typeof HTMLCollection !== \"undefined\" &&\r\n    typeof NodeList !== \"undefined\") {\r\n    HTMLCollection.prototype.currencyConverter = NodeList.prototype.currencyConverter = function (config) {\r\n        return _currencyConverter(this, config);\r\n    };\r\n    HTMLElement.prototype.currencyConverter = function (config) {\r\n        return _currencyConverter([this], config);\r\n    };\r\n}\r\nconst currencyConverter = function (selector, config) {\r\n    if (typeof selector === \"string\") {\r\n        return _currencyConverter(window.document.querySelectorAll(selector), config);\r\n    }\r\n    else if (selector instanceof Node) {\r\n        return _currencyConverter([selector], config);\r\n    }\r\n    else {\r\n        return _currencyConverter(selector, config);\r\n    }\r\n};\r\nif (typeof window !== \"undefined\") {\r\n    window.currencyConverter = currencyConverter;\r\n}\r\nexports.default = currencyConverter;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.defaults = void 0;\r\nexports.defaults = {\r\n    fromCurrency: 'EUR',\r\n    toCurrency: 'USD',\r\n    baseAmount: 100,\r\n    currencyApi: `https://api.exchangeratesapi.io/latest`,\r\n    precision: 4,\r\n    locale: {},\r\n    withText: true\r\n};\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.createSelect = exports.createNumberInput = exports.createElement = void 0;\r\nfunction createElement(tag, className, content) {\r\n    const e = window.document.createElement(tag);\r\n    className = className || \"\";\r\n    content = content || \"\";\r\n    e.className = className;\r\n    if (content !== undefined)\r\n        e.textContent = content;\r\n    return e;\r\n}\r\nexports.createElement = createElement;\r\nfunction createNumberInput(inputClassName, opts) {\r\n    const wrapper = createElement(\"div\", \"input-wrapper\"), numInput = createElement(\"input\", inputClassName);\r\n    if (navigator.userAgent.indexOf(\"MSIE 9.0\") === -1) {\r\n        numInput.type = \"number\";\r\n    }\r\n    else {\r\n        numInput.type = \"text\";\r\n    }\r\n    if (opts !== undefined)\r\n        for (const key in opts)\r\n            numInput.setAttribute(key, opts[key]);\r\n    wrapper.appendChild(numInput);\r\n    return wrapper;\r\n}\r\nexports.createNumberInput = createNumberInput;\r\nfunction createSelect(inputClassName, opts) {\r\n    const wrapper = createElement(\"div\", \"select-wrapper\"), numInput = createElement(\"select\", inputClassName);\r\n    if (opts !== undefined)\r\n        for (const key in opts)\r\n            numInput.setAttribute(key, opts[key]);\r\n    wrapper.appendChild(numInput);\r\n    return wrapper;\r\n}\r\nexports.createSelect = createSelect;\r\n","// extracted by mini-css-extract-plugin"],"sourceRoot":""}